<SHEP>/MockMain/pipelines/noneUnused_<DATE>
<SHEP>/MockMain/pipelines/noneUnused_<DATE>
<SHEP>/MockMain/pipelines/noneUnused_<DATE>

STANDARD_ERR:
# new precheck pipeline makes a pipeline
Building pipeline: <SHEP>/MockMain/pipelines/noneUnused_<DATE>
Done initializing BioLockJ.
Done checking module: 00_AddPseudoCount
Done checking module: 01_NormalizeByReadsPerMillion
Done checking module: 02_LogTransformTaxaTables
Done checking dependencies.

After an initial status check, all pipeline updates will be in the pipeline folder.
cd-blj -> Move to pipeline output directory

Precheck is complete. No problems were found in this pipeline configuration.
# A pipeline with -u is also -p, and replaces a previous pipeline. No mention of unused props.
Discarding pre-existing precheck pipeline: <SHEP>/MockMain/pipelines/noneUnused_<DATE>
Building pipeline: <SHEP>/MockMain/pipelines/noneUnused_<DATE>
Done initializing BioLockJ.
Done checking module: 00_AddPseudoCount
Done checking module: 01_NormalizeByReadsPerMillion
Done checking module: 02_LogTransformTaxaTables
Done checking dependencies.

After an initial status check, all pipeline updates will be in the pipeline folder.
cd-blj -> Move to pipeline output directory

Precheck is complete. No problems were found in this pipeline configuration.
# New real pipeline replaces a previous pre-check pipeline. No mention of unused props.
Discarding pre-existing precheck pipeline: <SHEP>/MockMain/pipelines/noneUnused_<DATE>
Building pipeline: <SHEP>/MockMain/pipelines/noneUnused_<DATE>
Done initializing BioLockJ.
Done checking module: 00_AddPseudoCount
Done checking module: 01_NormalizeByReadsPerMillion
Done checking module: 02_LogTransformTaxaTables
Done checking dependencies.

After an initial status check, all pipeline updates will be in the pipeline folder.
cd-blj -> Move to pipeline output directory

Pipeline is running.
